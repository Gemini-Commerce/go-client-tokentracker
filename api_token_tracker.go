/*
Token Tracker Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokentracker

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type TokenTrackerAPI interface {

	/*
	TokenTrackerAdjustTokenBalance AdjustTokenBalance

	Adjust token balance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tenantId
	@return TokenTrackerAPITokenTrackerAdjustTokenBalanceRequest
	*/
	TokenTrackerAdjustTokenBalance(ctx context.Context, tenantId string) TokenTrackerAPITokenTrackerAdjustTokenBalanceRequest

	// TokenTrackerAdjustTokenBalanceExecute executes the request
	//  @return TokentrackerAdjustTokenBalanceResponse
	TokenTrackerAdjustTokenBalanceExecute(r TokenTrackerAPITokenTrackerAdjustTokenBalanceRequest) (*TokentrackerAdjustTokenBalanceResponse, *http.Response, error)

	/*
	TokenTrackerGetTokenBalance GetTokenBalance

	Get token balance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tenantId
	@return TokenTrackerAPITokenTrackerGetTokenBalanceRequest
	*/
	TokenTrackerGetTokenBalance(ctx context.Context, tenantId string) TokenTrackerAPITokenTrackerGetTokenBalanceRequest

	// TokenTrackerGetTokenBalanceExecute executes the request
	//  @return TokentrackerGetTokenBalanceResponse
	TokenTrackerGetTokenBalanceExecute(r TokenTrackerAPITokenTrackerGetTokenBalanceRequest) (*TokentrackerGetTokenBalanceResponse, *http.Response, error)

	/*
	TokenTrackerStripeWebhook StripeWebhook

	Stripe webhook

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return TokenTrackerAPITokenTrackerStripeWebhookRequest
	*/
	TokenTrackerStripeWebhook(ctx context.Context) TokenTrackerAPITokenTrackerStripeWebhookRequest

	// TokenTrackerStripeWebhookExecute executes the request
	//  @return map[string]interface{}
	TokenTrackerStripeWebhookExecute(r TokenTrackerAPITokenTrackerStripeWebhookRequest) (map[string]interface{}, *http.Response, error)
}

// TokenTrackerAPIService TokenTrackerAPI service
type TokenTrackerAPIService service

type TokenTrackerAPITokenTrackerAdjustTokenBalanceRequest struct {
	ctx context.Context
	ApiService TokenTrackerAPI
	tenantId string
	body *TokenTrackerAdjustTokenBalanceRequest
}

func (r TokenTrackerAPITokenTrackerAdjustTokenBalanceRequest) Body(body TokenTrackerAdjustTokenBalanceRequest) TokenTrackerAPITokenTrackerAdjustTokenBalanceRequest {
	r.body = &body
	return r
}

func (r TokenTrackerAPITokenTrackerAdjustTokenBalanceRequest) Execute() (*TokentrackerAdjustTokenBalanceResponse, *http.Response, error) {
	return r.ApiService.TokenTrackerAdjustTokenBalanceExecute(r)
}

/*
TokenTrackerAdjustTokenBalance AdjustTokenBalance

Adjust token balance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tenantId
 @return TokenTrackerAPITokenTrackerAdjustTokenBalanceRequest
*/
func (a *TokenTrackerAPIService) TokenTrackerAdjustTokenBalance(ctx context.Context, tenantId string) TokenTrackerAPITokenTrackerAdjustTokenBalanceRequest {
	return TokenTrackerAPITokenTrackerAdjustTokenBalanceRequest{
		ApiService: a,
		ctx: ctx,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return TokentrackerAdjustTokenBalanceResponse
func (a *TokenTrackerAPIService) TokenTrackerAdjustTokenBalanceExecute(r TokenTrackerAPITokenTrackerAdjustTokenBalanceRequest) (*TokentrackerAdjustTokenBalanceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TokentrackerAdjustTokenBalanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TokenTrackerAPIService.TokenTrackerAdjustTokenBalance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{tenantId}/adjust_token_balance"
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TokenTrackerAPITokenTrackerGetTokenBalanceRequest struct {
	ctx context.Context
	ApiService TokenTrackerAPI
	tenantId string
	body *map[string]interface{}
}

func (r TokenTrackerAPITokenTrackerGetTokenBalanceRequest) Body(body map[string]interface{}) TokenTrackerAPITokenTrackerGetTokenBalanceRequest {
	r.body = &body
	return r
}

func (r TokenTrackerAPITokenTrackerGetTokenBalanceRequest) Execute() (*TokentrackerGetTokenBalanceResponse, *http.Response, error) {
	return r.ApiService.TokenTrackerGetTokenBalanceExecute(r)
}

/*
TokenTrackerGetTokenBalance GetTokenBalance

Get token balance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tenantId
 @return TokenTrackerAPITokenTrackerGetTokenBalanceRequest
*/
func (a *TokenTrackerAPIService) TokenTrackerGetTokenBalance(ctx context.Context, tenantId string) TokenTrackerAPITokenTrackerGetTokenBalanceRequest {
	return TokenTrackerAPITokenTrackerGetTokenBalanceRequest{
		ApiService: a,
		ctx: ctx,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return TokentrackerGetTokenBalanceResponse
func (a *TokenTrackerAPIService) TokenTrackerGetTokenBalanceExecute(r TokenTrackerAPITokenTrackerGetTokenBalanceRequest) (*TokentrackerGetTokenBalanceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TokentrackerGetTokenBalanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TokenTrackerAPIService.TokenTrackerGetTokenBalance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{tenantId}/get_token_balance"
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TokenTrackerAPITokenTrackerStripeWebhookRequest struct {
	ctx context.Context
	ApiService TokenTrackerAPI
	body *TokentrackerStripeWebhookRequest
}

func (r TokenTrackerAPITokenTrackerStripeWebhookRequest) Body(body TokentrackerStripeWebhookRequest) TokenTrackerAPITokenTrackerStripeWebhookRequest {
	r.body = &body
	return r
}

func (r TokenTrackerAPITokenTrackerStripeWebhookRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.TokenTrackerStripeWebhookExecute(r)
}

/*
TokenTrackerStripeWebhook StripeWebhook

Stripe webhook

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return TokenTrackerAPITokenTrackerStripeWebhookRequest
*/
func (a *TokenTrackerAPIService) TokenTrackerStripeWebhook(ctx context.Context) TokenTrackerAPITokenTrackerStripeWebhookRequest {
	return TokenTrackerAPITokenTrackerStripeWebhookRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *TokenTrackerAPIService) TokenTrackerStripeWebhookExecute(r TokenTrackerAPITokenTrackerStripeWebhookRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TokenTrackerAPIService.TokenTrackerStripeWebhook")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/stripe/webhook"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
